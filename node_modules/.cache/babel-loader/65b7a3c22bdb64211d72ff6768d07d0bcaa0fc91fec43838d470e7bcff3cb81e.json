{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();export const useAuth=()=>{const context=useContext(AuthContext);if(!context){throw new Error('useAuth must be used within an AuthProvider');}return context;};export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[isAuthenticated,setIsAuthenticated]=useState(false);const[loading,setLoading]=useState(true);useEffect(()=>{// Check if user is logged in from localStorage\nconst savedUser=localStorage.getItem('chanakya_user');if(savedUser){setUser(JSON.parse(savedUser));setIsAuthenticated(true);}setLoading(false);},[]);const signIn=async(email,password)=>{try{// Simulate API call - replace with actual authentication\nif(email&&password){const userData={id:Date.now(),email,name:email.split('@')[0],role:'patient'};setUser(userData);setIsAuthenticated(true);localStorage.setItem('chanakya_user',JSON.stringify(userData));return{success:true};}else{throw new Error('Invalid credentials');}}catch(error){return{success:false,error:error.message};}};const signUp=async(name,email,password,confirmPassword)=>{try{// Simulate API call - replace with actual registration\nif(password!==confirmPassword){throw new Error('Passwords do not match');}if(password.length<6){throw new Error('Password must be at least 6 characters');}const userData={id:Date.now(),email,name,role:'patient'};setUser(userData);setIsAuthenticated(true);localStorage.setItem('chanakya_user',JSON.stringify(userData));return{success:true};}catch(error){return{success:false,error:error.message};}};const signOut=()=>{setUser(null);setIsAuthenticated(false);localStorage.removeItem('chanakya_user');};const value={user,isAuthenticated,loading,signIn,signUp,signOut};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsx","_jsx","AuthContext","useAuth","context","Error","AuthProvider","_ref","children","user","setUser","isAuthenticated","setIsAuthenticated","loading","setLoading","savedUser","localStorage","getItem","JSON","parse","signIn","email","password","userData","id","Date","now","name","split","role","setItem","stringify","success","error","message","signUp","confirmPassword","length","signOut","removeItem","value","Provider"],"sources":["C:/Users/91700/Desktop/CHANAKYA DOCTOR AI/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Check if user is logged in from localStorage\r\n    const savedUser = localStorage.getItem('chanakya_user');\r\n    if (savedUser) {\r\n      setUser(JSON.parse(savedUser));\r\n      setIsAuthenticated(true);\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const signIn = async (email, password) => {\r\n    try {\r\n      // Simulate API call - replace with actual authentication\r\n      if (email && password) {\r\n        const userData = {\r\n          id: Date.now(),\r\n          email,\r\n          name: email.split('@')[0],\r\n          role: 'patient'\r\n        };\r\n        \r\n        setUser(userData);\r\n        setIsAuthenticated(true);\r\n        localStorage.setItem('chanakya_user', JSON.stringify(userData));\r\n        return { success: true };\r\n      } else {\r\n        throw new Error('Invalid credentials');\r\n      }\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  const signUp = async (name, email, password, confirmPassword) => {\r\n    try {\r\n      // Simulate API call - replace with actual registration\r\n      if (password !== confirmPassword) {\r\n        throw new Error('Passwords do not match');\r\n      }\r\n      \r\n      if (password.length < 6) {\r\n        throw new Error('Password must be at least 6 characters');\r\n      }\r\n\r\n      const userData = {\r\n        id: Date.now(),\r\n        email,\r\n        name,\r\n        role: 'patient'\r\n      };\r\n      \r\n      setUser(userData);\r\n      setIsAuthenticated(true);\r\n      localStorage.setItem('chanakya_user', JSON.stringify(userData));\r\n      return { success: true };\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  const signOut = () => {\r\n    setUser(null);\r\n    setIsAuthenticated(false);\r\n    localStorage.removeItem('chanakya_user');\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    isAuthenticated,\r\n    loading,\r\n    signIn,\r\n    signUp,\r\n    signOut\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}